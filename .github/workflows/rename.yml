name: AI-Powered Code Renaming with Caching

on:
  push:
    branches:
      - main

jobs:
  rename_files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Cache jq Installation
        id: cache-jq
        uses: actions/cache@v3
        with:
          path: /usr/bin/jq
          key: jq-ubuntu

      - name: Install jq (if not cached)
        if: steps.cache-jq.outputs.cache-hit != 'true'
        run: sudo apt-get install -y jq

      - name: Load Cached Filenames
        id: load_cache
        run: |
          CACHE_FILE=".renamed_files.json"
          if [[ -f "$CACHE_FILE" ]]; then
            echo "Loading cache..."
            cat "$CACHE_FILE"
          else
            echo "{}" > "$CACHE_FILE"
          fi
          echo "CACHE_FILE=$CACHE_FILE" >> $GITHUB_ENV

      - name: Cache Renamed Files
        uses: actions/cache@v3
        with:
          path: .renamed_files.json
          key: renamed-files-cache-${{ github.sha }}
          restore-keys: renamed-files-cache-

      - name: Find Modified or New Python Files
        id: list_files
        run: |
          files=$(git diff --name-only HEAD~1 HEAD -- "OTHER/*.py" | jq -R -s -c 'split("\n")[:-1]')
          echo "files=$files" >> $GITHUB_ENV

      - name: Generate AI-Based Filenames and Handle Caching
        id: rename_files
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          declare -A filenames
          CACHE_FILE="$CACHE_FILE"
          TEMP_CACHE=".temp_cache.json"

          jq '.' "$CACHE_FILE" > "$TEMP_CACHE" || echo "{}" > "$TEMP_CACHE"

          for file in $(echo $files | jq -r '.[]'); do
            [[ ! -f "$file" ]] && continue

            code=$(cat "$file")
            hash=$(echo -n "$code" | sha256sum | cut -d' ' -f1)

            new_name=$(jq -r --arg hash "$hash" '.[$hash] // empty' "$TEMP_CACHE")

            if [[ -z "$new_name" ]]; then
              response=$(curl -s https://api.groq.com/openai/v1/chat/completions \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json" \
                -d '{
                  "model": "llama-3.3-70b-specdec",
                  "messages": [{"role": "user", "content": "Analyze this Python script and suggest a meaningful filename in snake_case format. Do not include any explanation:\n\n```\n'"$code"'\n```"}]
                }')

              new_name=$(echo "$response" | jq -r '.choices[0].message.content' | tr -d '[:space:]')
              new_name=$(echo "$new_name" | tr ' ' '_')

              new_name="OTHER/${new_name}.py"

              count=1
              base_name="${new_name%.py}"
              while [[ -e "$new_name" || ${filenames[$new_name]} ]]; do
                new_name="${base_name}_${count}.py"
                ((count++))
              done

              filenames["$new_name"]=1

              jq --arg hash "$hash" --arg name "$new_name" '. + {($hash): $name}' "$TEMP_CACHE" > "$TEMP_CACHE.tmp" && mv "$TEMP_CACHE.tmp" "$TEMP_CACHE"
            fi

            if [[ "$new_name" != "$file" ]]; then
              mv "$file" "$new_name"
              echo "Renamed $file -> $new_name"
            fi
          done

          mv "$TEMP_CACHE" "$CACHE_FILE"

      - name: Commit and Push Changes
        run: |
          git config --local user.name "github-actions"
          git config --local user.email "github-actions@github.com"
          git add .
          git commit -m 'Automated AI-based renaming' || echo "No changes to commit"
          git push origin main
